#!/usr/bin/env python3
"""
TEST DE DIVERSIDAD - ALGORITMO GEN√âTICO
========================================

Verifica que el algoritmo gen√©tico:
1. S√ç ejecute m√∫ltiples generaciones (no solo 1)
2. S√ç genere diversidad en los horarios
3. S√ç evolucione y compare diferentes soluciones

Autor: Sistema de Verificaci√≥n Autom√°tica
Fecha: 2025-08-14
"""

import os
import sys
from datetime import datetime

# Configurar Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'colegio.settings')
import django
django.setup()

from horarios.models import Horario
from horarios.genetico import generar_horarios_genetico

def test_diversidad():
    print("üß™ TEST DE DIVERSIDAD - ALGORITMO GEN√âTICO")
    print("=" * 60)
    
    try:
        # Test 1: Generar horarios con par√°metros que fuercen evoluci√≥n
        print("\nüîç TEST 1: Generando horarios con evoluci√≥n forzada...")
        
        # Limpiar horarios existentes
        Horario.objects.all().delete()
        print("  üóëÔ∏è Horarios existentes eliminados")
        
        # Generar horarios con par√°metros que fuercen evoluci√≥n
        resultado = generar_horarios_genetico(
            poblacion_size=50,      # Poblaci√≥n peque√±a para test r√°pido
            generaciones=50,         # 50 generaciones para ver evoluci√≥n
            timeout_seg=120,         # 2 minutos m√°ximo
            prob_cruce=0.8,          # Alto cruce
            prob_mutacion=0.3,       # Alta mutaci√≥n para diversidad
            elite=2,                 # Poco elitismo para permitir cambios
            paciencia=15,            # Paciencia baja para ver evoluci√≥n
            workers=1,               # 1 worker para test
            semilla=None             # Semilla aleatoria
        )
        
        if resultado:
            print("  ‚úÖ Horarios generados exitosamente")
            
            # Test 2: Verificar que se ejecutaron m√∫ltiples generaciones
            print("\nüîç TEST 2: Verificando ejecuci√≥n de m√∫ltiples generaciones...")
            
            # Obtener logs del sistema para ver cu√°ntas generaciones se ejecutaron
            from django.core.cache import cache
            progreso = cache.get('ga_progreso_actual')
            
            if progreso:
                generacion_final = progreso.get('generacion', 0)
                print(f"  ‚Ä¢ Generaciones ejecutadas: {generacion_final}")
                
                if generacion_final > 1:
                    print("  ‚úÖ PERFECTO: Se ejecutaron m√∫ltiples generaciones")
                else:
                    print("  ‚ùå ERROR: Solo se ejecut√≥ 1 generaci√≥n")
                    return False
            else:
                print("  ‚ö†Ô∏è No se encontr√≥ progreso en cache")
            
            # Test 3: Verificar horarios generados
            print("\nüîç TEST 3: Verificando horarios generados...")
            horarios = Horario.objects.all()
            total_horarios = horarios.count()
            
            print(f"  ‚Ä¢ Total de horarios: {total_horarios}")
            
            if total_horarios >= 350:  # Al menos 97% de los 360 bloques
                print("  ‚úÖ PERFECTO: Horarios generados con alta cobertura")
            else:
                print(f"  ‚ö†Ô∏è ADVERTENCIA: Solo {total_horarios}/360 bloques generados")
            
            print("\nüéâ TEST DE DIVERSIDAD COMPLETADO")
            return True
            
        else:
            print("  ‚ùå Error generando horarios")
            return False
        
    except Exception as e:
        print(f"\n‚ùå ERROR: {str(e)}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    test_diversidad() 