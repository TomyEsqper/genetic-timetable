#!/usr/bin/env python3
"""
TEST DE PAR√ÅMETROS DE CALIDAD
==============================

Verifica que los par√°metros de configuraci√≥n de calidad se usen
correctamente en la generaci√≥n de horarios.

Autor: Sistema de Verificaci√≥n Autom√°tica
Fecha: 2025-08-14
"""

import os
import sys
from datetime import datetime

# Configurar Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'colegio.settings')
import django
django.setup()

from horarios.models import Horario
from horarios.genetico import generar_horarios_genetico

def test_parametros_calidad():
    print("üß™ TEST DE PAR√ÅMETROS DE CALIDAD")
    print("=" * 60)
    
    try:
        # Test 1: Verificar par√°metros de configuraci√≥n de calidad
        print("\nüîç TEST 1: Verificando par√°metros de configuraci√≥n de calidad...")
        
        # Par√°metros exactos de la configuraci√≥n de calidad
        parametros_calidad = {
            'poblacion_size': 80,
            'generaciones': 1000,
            'timeout_seg': 600,
            'prob_cruce': 0.9,
            'prob_mutacion': 0.05,
            'elite': 5,
            'paciencia': 50,
            'workers': 1,
            'semilla': 94601
        }
        
        print("  üìã Par√°metros de configuraci√≥n de calidad:")
        for key, value in parametros_calidad.items():
            print(f"    ‚Ä¢ {key}: {value}")
        
        # Test 2: Generar horarios con par√°metros de calidad
        print("\nüîç TEST 2: Generando horarios con par√°metros de calidad...")
        
        # Limpiar horarios existentes
        Horario.objects.all().delete()
        print("  üóëÔ∏è Horarios existentes eliminados")
        
        # Generar horarios con par√°metros de calidad
        resultado = generar_horarios_genetico(**parametros_calidad)
        
        if resultado:
            print("  ‚úÖ Horarios generados exitosamente")
            
            # Test 3: Verificar que se usaron los par√°metros correctos
            print("\nüîç TEST 3: Verificando uso de par√°metros...")
            
            # Obtener progreso del cache
            from django.core.cache import cache
            progreso = cache.get('ga_progreso_actual')
            
            if progreso:
                print("  ‚úÖ Progreso del algoritmo disponible en cache")
                print(f"    ‚Ä¢ Generaci√≥n actual: {progreso.get('generacion', 'N/A')}")
                print(f"    ‚Ä¢ Estado: {progreso.get('estado', 'N/A')}")
                print(f"    ‚Ä¢ Horarios parciales: {progreso.get('horarios_parciales', 'N/A')}")
                print(f"    ‚Ä¢ Mejor fitness: {progreso.get('mejor_fitness', 'N/A')}")
                print(f"    ‚Ä¢ Fill percentage: {progreso.get('fill_pct', 'N/A')}%")
            else:
                print("  ‚ö†Ô∏è No se encontr√≥ progreso en cache")
            
            # Test 4: Verificar horarios generados
            print("\nüîç TEST 4: Verificando horarios generados...")
            horarios = Horario.objects.all()
            total_horarios = horarios.count()
            
            print(f"  ‚Ä¢ Total de horarios: {total_horarios}")
            
            if total_horarios >= 350:  # Al menos 97% de los 360 bloques
                print("  ‚úÖ PERFECTO: Horarios generados con alta cobertura")
            else:
                print(f"  ‚ö†Ô∏è ADVERTENCIA: Solo {total_horarios}/360 bloques generados")
            
            # Test 5: Verificar que se ejecutaron m√∫ltiples generaciones
            print("\nüîç TEST 5: Verificando ejecuci√≥n de m√∫ltiples generaciones...")
            
            if progreso and progreso.get('generacion', 0) > 1:
                print(f"  ‚úÖ PERFECTO: Se ejecutaron {progreso.get('generacion', 0)} generaciones")
            else:
                print("  ‚ùå ERROR: Solo se ejecut√≥ 1 generaci√≥n o no hay progreso")
            
            print("\nüéâ TEST DE PAR√ÅMETROS DE CALIDAD COMPLETADO")
            return True
            
        else:
            print("  ‚ùå Error generando horarios")
            return False
        
    except Exception as e:
        print(f"\n‚ùå ERROR: {str(e)}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    test_parametros_calidad() 