#!/usr/bin/env python3
"""
Script de diagn√≥stico para identificar problemas en los datos del horario.

Este script analiza la base de datos para encontrar problemas que pueden estar
causando que el algoritmo gen√©tico no pueda generar una soluci√≥n v√°lida.
"""

import os
import sys
import django
from collections import defaultdict, Counter

# Configurar Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'colegio.settings')
django.setup()

from horarios.models import (
    Profesor, Materia, Curso, Aula, BloqueHorario, 
    MateriaGrado, MateriaProfesor, DisponibilidadProfesor,
    ConfiguracionColegio
)

def diagnosticar_problemas():
    """Ejecuta diagn√≥stico completo de los datos."""
    print("üîç DIAGN√ìSTICO COMPLETO DE DATOS DEL HORARIO")
    print("=" * 60)
    
    problemas = []
    
    # 1. Verificar bloques horarios
    print("\n1. VERIFICANDO BLOQUES HORARIOS...")
    bloques = BloqueHorario.objects.all()
    bloques_clase = bloques.filter(tipo='clase')
    
    if bloques_clase.count() == 0:
        problemas.append("‚ùå No hay bloques de tipo 'clase' definidos")
    else:
        print(f"‚úÖ {bloques_clase.count()} bloques de tipo 'clase' encontrados")
        print(f"   Bloques: {list(bloques_clase.values_list('numero', flat=True))}")
    
    # 2. Verificar profesores y disponibilidad
    print("\n2. VERIFICANDO PROFESORES Y DISPONIBILIDAD...")
    profesores = Profesor.objects.all()
    profesores_con_disponibilidad = DisponibilidadProfesor.objects.values_list('profesor', flat=True).distinct()
    profesores_sin_disponibilidad = profesores.exclude(id__in=profesores_con_disponibilidad)
    
    print(f"‚úÖ Total de profesores: {profesores.count()}")
    print(f"‚úÖ Profesores con disponibilidad: {len(profesores_con_disponibilidad)}")
    
    if profesores_sin_disponibilidad.exists():
        problemas.append(f"‚ùå {profesores_sin_disponibilidad.count()} profesores sin disponibilidad definida")
        nombres = list(profesores_sin_disponibilidad.values_list('nombre', flat=True)[:10])
        print(f"   Profesores sin disponibilidad: {', '.join(nombres)}{'...' if len(nombres) == 10 else ''}")
    
    # 3. Verificar materias y profesores habilitados
    print("\n3. VERIFICANDO MATERIAS Y PROFESORES...")
    materias = Materia.objects.all()
    materias_con_profesor = MateriaProfesor.objects.values_list('materia', flat=True).distinct()
    materias_sin_profesor = materias.exclude(id__in=materias_con_profesor)
    
    print(f"‚úÖ Total de materias: {materias.count()}")
    print(f"‚úÖ Materias con profesor: {len(materias_con_profesor)}")
    
    if materias_sin_profesor.exists():
        problemas.append(f"‚ùå {materias_sin_profesor.count()} materias sin profesor asignado")
        nombres = list(materias_sin_profesor.values_list('nombre', flat=True)[:10])
        print(f"   Materias sin profesor: {', '.join(nombres)}{'...' if len(nombres) == 10 else ''}")
    
    # 4. Verificar cursos y materias del plan
    print("\n4. VERIFICANDO CURSOS Y PLAN DE ESTUDIOS...")
    cursos = Curso.objects.all()
    materias_grado = MateriaGrado.objects.all()
    
    print(f"‚úÖ Total de cursos: {cursos.count()}")
    print(f"‚úÖ Total de materias por grado: {materias_grado.count()}")
    
    # Verificar que cada curso tenga materias
    cursos_sin_materias = []
    for curso in cursos:
        materias_curso = materias_grado.filter(grado=curso.grado)
        if materias_curso.count() == 0:
            cursos_sin_materias.append(curso.nombre)
    
    if cursos_sin_materias:
        problemas.append(f"‚ùå {len(cursos_sin_materias)} cursos sin materias en el plan de estudios")
        print(f"   Cursos sin materias: {', '.join(cursos_sin_materias)}")
    
    # 5. Verificar factibilidad de bloques por semana
    print("\n5. VERIFICANDO FACTIBILIDAD DE BLOQUES POR SEMANA...")
    # Intentar leer desde configuraci√≥n del colegio; si no, fallback razonable
    cfg = ConfiguracionColegio.objects.first()
    dias = [d.strip() for d in (cfg.dias_clase.split(',') if cfg and cfg.dias_clase else ['lunes','martes','mi√©rcoles','jueves','viernes'])]
    bloques_disponibles = len(dias) * bloques_clase.count()
    
    materias_inviables = []
    for materia in materias:
        if materia.bloques_por_semana > bloques_disponibles:
            materias_inviables.append(f"{materia.nombre} ({materia.bloques_por_semana} bloques)")
    
    if materias_inviables:
        problemas.append(f"‚ùå {len(materias_inviables)} materias requieren m√°s bloques de los disponibles ({bloques_disponibles})")
        print(f"   Materias inviables: {', '.join(materias_inviables[:5])}{'...' if len(materias_inviables) > 5 else ''}")
    
    # 6. Verificar distribuci√≥n de carga por profesor
    print("\n6. VERIFICANDO DISTRIBUCI√ìN DE CARGA POR PROFESOR...")
    carga_por_profesor = defaultdict(int)
    
    for mp in MateriaProfesor.objects.all():
        carga_por_profesor[mp.profesor_id] += mp.materia.bloques_por_semana
    
    if carga_por_profesor:
        max_carga = max(carga_por_profesor.values())
        min_carga = min(carga_por_profesor.values())
        
        print(f"‚úÖ Carga m√°xima por profesor: {max_carga} bloques")
        print(f"‚úÖ Carga m√≠nima por profesor: {min_carga} bloques")
        
        if max_carga > min_carga * 3:
            problemas.append(f"‚ö†Ô∏è Distribuci√≥n de carga muy desigual: m√°ximo {max_carga}, m√≠nimo {min_carga}")
    
    # 7. Verificar disponibilidad por d√≠a
    print("\n7. VERIFICANDO DISPONIBILIDAD POR D√çA...")
    disponibilidad_por_dia = defaultdict(int)
    
    for disp in DisponibilidadProfesor.objects.all():
        for bloque in range(disp.bloque_inicio, disp.bloque_fin + 1):
            disponibilidad_por_dia[disp.dia] += 1
    
    print("   Disponibilidad por d√≠a:")
    for dia in dias:
        print(f"     {dia.capitalize()}: {disponibilidad_por_dia.get(dia, 0)} slots disponibles")
    
    # 8. Verificar aulas
    print("\n8. VERIFICANDO AULAS...")
    aulas = Aula.objects.all()
    
    print(f"‚úÖ Total de aulas: {aulas.count()}")
    print(f"   Tipos de aula: {list(aulas.values_list('tipo', flat=True).distinct())}")
    
    # Verificar capacidad de aulas
    aulas_sin_capacidad = aulas.filter(capacidad__isnull=True)
    if aulas_sin_capacidad.exists():
        problemas.append(f"‚ö†Ô∏è {aulas_sin_capacidad.count()} aulas sin capacidad definida")
    
    # Resumen de problemas
    print("\n" + "=" * 60)
    print("üìä RESUMEN DEL DIAGN√ìSTICO")
    print("=" * 60)
    
    if problemas:
        print(f"‚ùå Se encontraron {len(problemas)} problemas:")
        for i, problema in enumerate(problemas, 1):
            print(f"   {i}. {problema}")
        
        print(f"\nüí° RECOMENDACIONES:")
        if any("sin disponibilidad" in p for p in problemas):
            print("   ‚Ä¢ Definir disponibilidad para todos los profesores")
        if any("sin profesor" in p for p in problemas):
            print("   ‚Ä¢ Asignar profesores a todas las materias")
        if any("bloques" in p and "disponibles" in p for p in problemas):
            print("   ‚Ä¢ Revisar bloques_por_semana de las materias")
        if any("carga" in p for p in problemas):
            print("   ‚Ä¢ Revisar distribuci√≥n de materias entre profesores")
        if any("capacidad" in p for p in problemas):
            print("   ‚Ä¢ Definir capacidad para todas las aulas")
    else:
        print("‚úÖ No se encontraron problemas cr√≠ticos en los datos")
    
    return problemas

def verificar_disponibilidad_espec√≠fica():
    """Verifica disponibilidad espec√≠fica de profesores problem√°ticos (detectados din√°micamente)."""
    print("\nüîç VERIFICACI√ìN ESPEC√çFICA DE DISPONIBILIDAD")
    print("=" * 60)
    
    # Detectar profesores sin disponibilidad o con muy poca disponibilidad
    profesores = Profesor.objects.all()
    ids_con_disp = set(DisponibilidadProfesor.objects.values_list('profesor', flat=True))
    profesores_sin_disp = profesores.exclude(id__in=ids_con_disp)

    # Considerar problem√°ticos tambi√©n a quienes tengan menos de 5 slots semanales
    def slots_profesor(pid: int):
        total = 0
        for d in DisponibilidadProfesor.objects.filter(profesor_id=pid):
            total += (d.bloque_fin - d.bloque_inicio + 1)
        return total

    profesores_pocos_slots = [p for p in profesores if slots_profesor(p.id) < 5]

    candidatos = list(profesores_sin_disp) + profesores_pocos_slots
    vistos = set()
    for profesor in candidatos:
        if profesor.id in vistos:
            continue
        vistos.add(profesor.id)
        disponibilidad = DisponibilidadProfesor.objects.filter(profesor=profesor)
        
        print(f"\nProfesor {profesor.id} ({profesor.nombre}):")
        
        if disponibilidad.exists():
            print("   Disponibilidad:")
            for disp in disponibilidad:
                print(f"     {disp.dia}: bloques {disp.bloque_inicio}-{disp.bloque_fin}")
        else:
            print("   ‚ùå SIN DISPONIBILIDAD DEFINIDA")
            
        # Verificar materias que puede impartir
        materias = MateriaProfesor.objects.filter(profesor=profesor)
        if materias.exists():
            print(f"   Materias: {', '.join([m.materia.nombre for m in materias])}")
        else:
            print("   ‚ùå SIN MATERIAS ASIGNADAS")

if __name__ == "__main__":
    # Constantes
    DIAS = ['lunes', 'martes', 'mi√©rcoles', 'jueves', 'viernes']
    
    try:
        problemas = diagnosticar_problemas()
        verificar_disponibilidad_espec√≠fica()
        
        if problemas:
            print(f"\nüö® El algoritmo gen√©tico probablemente fallar√° debido a estos problemas.")
            print("   Corrija estos problemas antes de intentar generar horarios.")
        else:
            print(f"\n‚úÖ Los datos parecen estar en buen estado.")
            print("   Si el algoritmo sigue fallando, revise la configuraci√≥n del algoritmo.")
            
    except Exception as e:
        print(f"‚ùå Error durante el diagn√≥stico: {e}")
        import traceback
        traceback.print_exc() 