# Generated by Django 5.2.5 on 2025-08-13 22:02

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('horarios', '0009_run_runmetric'),
    ]

    operations = [
        migrations.CreateModel(
            name='ReglaPedagogica',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(max_length=100, unique=True)),
                ('descripcion', models.TextField(help_text='Descripción detallada de la regla')),
                ('activa', models.BooleanField(default=True)),
                ('tipo_regla', models.CharField(choices=[('max_materia_dia', 'Máximo de una materia por día'), ('bloques_consecutivos', 'Bloques consecutivos requeridos'), ('distribucion_semanal', 'Distribución semanal equilibrada'), ('incompatibilidad', 'Materias incompatibles'), ('prioridad_horario', 'Prioridad de horario')], max_length=30)),
                ('parametros', models.JSONField(default=dict, help_text='Parámetros específicos de la regla en formato JSON')),
                ('prioridad', models.IntegerField(default=5, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Regla Pedagógica',
                'verbose_name_plural': 'Reglas Pedagógicas',
                'ordering': ['prioridad', 'nombre'],
            },
        ),
        migrations.AddField(
            model_name='materia',
            name='es_relleno',
            field=models.BooleanField(default=False, help_text='Indica si esta materia puede usarse como relleno para completar horarios'),
        ),
        migrations.AddField(
            model_name='materia',
            name='max_bloques_por_dia',
            field=models.IntegerField(default=3, help_text='Máximo número de bloques de esta materia que puede tener un curso en un día', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(6)]),
        ),
        migrations.AddField(
            model_name='materia',
            name='prioridad',
            field=models.IntegerField(default=1, help_text='Prioridad de la materia (1=alta, 10=baja). Materias de relleno suelen tener prioridad baja', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)]),
        ),
        migrations.AddField(
            model_name='materia',
            name='requiere_doble_bloque',
            field=models.BooleanField(default=False, help_text='Indica si la materia requiere bloques consecutivos (ej: laboratorios)'),
        ),
        migrations.AddField(
            model_name='materia',
            name='tipo_materia',
            field=models.CharField(choices=[('obligatoria', 'Obligatoria'), ('relleno', 'Relleno'), ('electiva', 'Electiva'), ('proyecto', 'Proyecto')], default='obligatoria', help_text='Tipo de materia para clasificación y priorización', max_length=20),
        ),
        migrations.AddField(
            model_name='profesor',
            name='especialidad',
            field=models.CharField(blank=True, help_text='Área de especialidad del profesor', max_length=100),
        ),
        migrations.AddField(
            model_name='profesor',
            name='max_bloques_por_semana',
            field=models.IntegerField(default=30, help_text='Máximo número de bloques que puede dictar por semana', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(50)]),
        ),
        migrations.AddField(
            model_name='profesor',
            name='puede_dictar_relleno',
            field=models.BooleanField(default=True, help_text='Indica si el profesor puede dictar materias de relleno'),
        ),
        migrations.CreateModel(
            name='ConfiguracionCurso',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slots_objetivo', models.IntegerField(default=30, help_text='Número objetivo de slots/bloques por semana para este curso', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(50)])),
                ('permite_relleno', models.BooleanField(default=True, help_text='Permite usar materias de relleno para completar la carga horaria')),
                ('min_bloques_relleno', models.IntegerField(default=0, help_text='Mínimo número de bloques de relleno requeridos', validators=[django.core.validators.MinValueValidator(0)])),
                ('max_bloques_relleno', models.IntegerField(default=5, help_text='Máximo número de bloques de relleno permitidos', validators=[django.core.validators.MinValueValidator(0)])),
                ('distribucion_equilibrada', models.BooleanField(default=True, help_text='Intenta distribuir las materias equilibradamente durante la semana')),
                ('evitar_huecos', models.BooleanField(default=True, help_text='Evita dejar bloques vacíos entre clases')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('curso', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='configuracion', to='horarios.curso')),
            ],
            options={
                'verbose_name': 'Configuración de Curso',
                'verbose_name_plural': 'Configuraciones de Curso',
            },
        ),
        migrations.CreateModel(
            name='MateriaRelleno',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('flexible_bloques', models.BooleanField(default=True, help_text='Permite ajustar el número de bloques según necesidad')),
                ('min_bloques', models.IntegerField(default=1, help_text='Mínimo número de bloques cuando se usa como relleno', validators=[django.core.validators.MinValueValidator(1)])),
                ('max_bloques', models.IntegerField(default=3, help_text='Máximo número de bloques cuando se usa como relleno', validators=[django.core.validators.MinValueValidator(1)])),
                ('activa', models.BooleanField(default=True)),
                ('grados_compatibles', models.ManyToManyField(blank=True, help_text='Grados en los que se puede usar esta materia de relleno', to='horarios.grado')),
                ('materia', models.OneToOneField(limit_choices_to={'es_relleno': True}, on_delete=django.db.models.deletion.CASCADE, related_name='config_relleno', to='horarios.materia')),
                ('profesores_disponibles', models.ManyToManyField(help_text='Profesores que pueden dictar esta materia de relleno', limit_choices_to={'puede_dictar_relleno': True}, to='horarios.profesor')),
            ],
            options={
                'verbose_name': 'Configuración de Materia de Relleno',
                'verbose_name_plural': 'Configuraciones de Materias de Relleno',
            },
        ),
    ]
