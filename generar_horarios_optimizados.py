#!/usr/bin/env python3
"""
Script para generar horarios con par√°metros optimizados autom√°ticamente
"""

import os
import django
import time

# Configurar Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'colegio.settings')
django.setup()

from horarios.genetico_funcion import generar_horarios_genetico

def generar_horarios_optimizados():
    """Genera horarios con par√°metros optimizados"""
    print("üöÄ GENERANDO HORARIOS CON PAR√ÅMETROS OPTIMIZADOS")
    print("=" * 60)
    
    # Configuraci√≥n optimizada para problema de 230 bloques
    config_optimizada = {
        'poblacion_size': 200,      # Poblaci√≥n grande para mejor exploraci√≥n
        'generaciones': 800,        # Muchas generaciones para convergencia
        'timeout_seg': 900,         # 15 minutos m√°ximo
        'prob_cruce': 0.9,          # Alta probabilidad de cruce
        'prob_mutacion': 0.15,      # Mutaci√≥n moderada
        'elite': 10,                # Preservar m√°s individuos buenos
        'paciencia': 50,            # M√°s paciencia antes de parar
        'workers': 2,               # 2 workers para paralelizaci√≥n
        'semilla': 42               # Semilla fija para reproducibilidad
    }
    
    print("üìã CONFIGURACI√ìN OPTIMIZADA:")
    for key, value in config_optimizada.items():
        print(f"   ‚Ä¢ {key}: {value}")
    
    print(f"\n‚è∞ INICIANDO GENERACI√ìN...")
    print(f"   ‚Ä¢ Tiempo m√°ximo estimado: {config_optimizada['timeout_seg']} segundos")
    print(f"   ‚Ä¢ Generaciones m√°ximas: {config_optimizada['generaciones']}")
    print(f"   ‚Ä¢ Poblaci√≥n: {config_optimizada['poblacion_size']} individuos")
    
    # Iniciar temporizador
    inicio = time.time()
    
    try:
        resultado = generar_horarios_genetico(**config_optimizada)
        
        tiempo_total = time.time() - inicio
        
        if resultado['exito']:
            print(f"\n‚úÖ GENERACI√ìN EXITOSA!")
            print(f"   ‚Ä¢ Horarios generados: {resultado.get('total_horarios', 0)}")
            print(f"   ‚Ä¢ Tiempo de ejecuci√≥n: {tiempo_total:.2f} segundos")
            print(f"   ‚Ä¢ Generaciones completadas: {resultado.get('generaciones_completadas', 0)}")
            print(f"   ‚Ä¢ Mejor fitness: {resultado.get('mejor_fitness', 0):.4f}")
            
            # Verificar si hay horarios en la base de datos
            from horarios.models import Horario
            total_horarios_bd = Horario.objects.count()
            print(f"   ‚Ä¢ Horarios en BD: {total_horarios_bd}")
            
            if total_horarios_bd > 0:
                print(f"\nüéâ ¬°HORARIOS GENERADOS EXITOSAMENTE!")
                print(f"   ‚Ä¢ Puedes verlos en el dashboard")
                print(f"   ‚Ä¢ Total de asignaciones: {total_horarios_bd}")
            else:
                print(f"\n‚ö†Ô∏è Generaci√≥n exitosa pero no hay horarios en BD")
                print(f"   ‚Ä¢ Revisar si hay problemas de guardado")
                
        else:
            print(f"\n‚ùå GENERACI√ìN FALLIDA")
            print(f"   ‚Ä¢ Error: {resultado.get('error', 'Desconocido')}")
            print(f"   ‚Ä¢ Tiempo transcurrido: {tiempo_total:.2f} segundos")
            
            # An√°lisis del error
            if 'choques' in resultado:
                print(f"\nüîç AN√ÅLISIS DE ERRORES:")
                choques = resultado['choques']
                print(f"   ‚Ä¢ Choques de profesores: {len(choques)}")
                
                # Agrupar choques por profesor
                choques_por_profesor = {}
                for choque in choques:
                    prof_id = choque['profesor_id']
                    if prof_id not in choques_por_profesor:
                        choques_por_profesor[prof_id] = []
                    choques_por_profesor[prof_id].append(choque)
                
                print(f"   ‚Ä¢ Profesores con conflictos:")
                for prof_id, conflictos in choques_por_profesor.items():
                    print(f"     - Profesor {prof_id}: {len(conflictos)} conflictos")
            
            if 'asignaciones_invalidas' in resultado:
                asignaciones_inv = resultado['asignaciones_invalidas']
                print(f"   ‚Ä¢ Asignaciones inv√°lidas: {len(asignaciones_inv)}")
                
            if 'diferencias' in resultado:
                diferencias = resultado['diferencias']
                print(f"   ‚Ä¢ Diferencias en horas: {len(diferencias)}")
                
    except Exception as e:
        tiempo_total = time.time() - inicio
        print(f"\n‚ùå ERROR EN LA GENERACI√ìN: {str(e)}")
        print(f"   ‚Ä¢ Tiempo transcurrido: {tiempo_total:.2f} segundos")
        
        # Sugerencias de soluci√≥n
        print(f"\nüí° SUGERENCIAS DE SOLUCI√ìN:")
        print(f"   ‚Ä¢ Verificar que todos los profesores tengan disponibilidad")
        print(f"   ‚Ä¢ Revisar que no haya conflictos en MateriaProfesor")
        print(f"   ‚Ä¢ Comprobar que las aulas est√©n disponibles")
        print(f"   ‚Ä¢ Verificar la configuraci√≥n de bloques por d√≠a")

if __name__ == "__main__":
    generar_horarios_optimizados() 