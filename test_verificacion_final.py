#!/usr/bin/env python3
"""
TEST DE VERIFICACI√ìN FINAL - AN√ÅLISIS DETALLADO
================================================

Analiza exactamente por qu√© no se rellenan los huecos:
1. Cu√°ntos bloques requiere cada curso
2. Cu√°ntos bloques se asignan realmente
3. D√≥nde est√°n los huecos exactamente
4. Por qu√© no se rellenan autom√°ticamente

Autor: Sistema de Verificaci√≥n Autom√°tica
Fecha: 2025-08-14
"""

import os
import sys
from datetime import datetime

# Configurar Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'colegio.settings')
import django
django.setup()

from horarios.models import Horario, Curso, Materia, MateriaGrado

def analisis_detallado_huecos():
    print("üîç AN√ÅLISIS DETALLADO DE HUECOS")
    print("=" * 60)
    
    try:
        # An√°lisis 1: Bloques requeridos vs disponibles
        print("\nüìä AN√ÅLISIS 1: BLOQUES REQUERIDOS VS DISPONIBLES")
        print("-" * 60)
        
        cursos = Curso.objects.all().order_by('nombre')
        total_requerido = 0
        total_disponible = 0
        
        for curso in cursos:
            materias_grado = MateriaGrado.objects.filter(grado=curso.grado)
            bloques_requeridos = sum(mg.materia.bloques_por_semana for mg in materias_grado)
            bloques_disponibles = 5 * 6  # 5 d√≠as √ó 6 bloques
            
            total_requerido += bloques_requeridos
            total_disponible += bloques_disponibles
            
            print(f"  ‚Ä¢ {curso.nombre}: {bloques_requeridos}/{bloques_disponibles} bloques")
            print(f"    - Huecos: {bloques_disponibles - bloques_requeridos}")
            
            # Mostrar materias y sus bloques
            for mg in materias_grado:
                materia = mg.materia
                print(f"      - {materia.nombre}: {materia.bloques_por_semana} bloques")
        
        print(f"\nüìà RESUMEN TOTAL:")
        print(f"  ‚Ä¢ Bloques requeridos: {total_requerido}")
        print(f"  ‚Ä¢ Bloques disponibles: {total_disponible}")
        print(f"  ‚Ä¢ Huecos totales: {total_disponible - total_requerido}")
        
        # An√°lisis 2: Horarios actuales
        print("\nüìÖ AN√ÅLISIS 2: HORARIOS ACTUALES")
        print("-" * 60)
        
        horarios = Horario.objects.all()
        total_horarios = horarios.count()
        
        print(f"  ‚Ä¢ Total de horarios en BD: {total_horarios}")
        print(f"  ‚Ä¢ Diferencia con requeridos: {total_horarios - total_requerido}")
        print(f"  ‚Ä¢ Diferencia con disponibles: {total_horarios - total_disponible}")
        
        # An√°lisis 3: Huecos por curso y d√≠a
        print("\nüîç AN√ÅLISIS 3: HUECOS POR CURSO Y D√çA")
        print("-" * 60)
        
        for curso in cursos:
            print(f"\n  üìö {curso.nombre}:")
            horarios_curso = horarios.filter(curso=curso)
            
            for dia in ['lunes', 'martes', 'mi√©rcoles', 'jueves', 'viernes']:
                bloques_dia = horarios_curso.filter(dia=dia).count()
                huecos_dia = 6 - bloques_dia
                
                if huecos_dia > 0:
                    print(f"    ‚ùå {dia}: {bloques_dia}/6 bloques ({huecos_dia} huecos)")
                    
                    # Mostrar qu√© bloques est√°n ocupados
                    bloques_ocupados = set(horarios_curso.filter(dia=dia).values_list('bloque', flat=True))
                    bloques_faltantes = set(range(1, 7)) - bloques_ocupados
                    print(f"      - Bloques ocupados: {sorted(bloques_ocupados)}")
                    print(f"      - Bloques faltantes: {sorted(bloques_faltantes)}")
                else:
                    print(f"    ‚úÖ {dia}: {bloques_dia}/6 bloques")
        
        # An√°lisis 4: Por qu√© no se rellenan los huecos
        print("\nü§î AN√ÅLISIS 4: ¬øPOR QU√â NO SE RELLENAN LOS HUECOS?")
        print("-" * 60)
        
        print("  El problema es que el algoritmo:")
        print("  1. ‚úÖ Asigna TODOS los bloques requeridos por cada materia")
        print("  2. ‚ùå NO rellena los huecos restantes autom√°ticamente")
        print("  3. ‚ùå Considera que 'est√° completo' cuando cumple bloques_por_semana")
        print("  4. ‚ùå No entiende que debe rellenar TODOS los 360 bloques disponibles")
        
        print(f"\n  Soluci√≥n necesaria:")
        print(f"  - Rellenar {total_disponible - total_requerido} huecos con materias del curso")
        print(f"  - Usar materias que no hayan alcanzado su m√°ximo de bloques")
        print(f"  - Distribuir los huecos de manera equilibrada entre cursos")
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå ERROR: {str(e)}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    analisis_detallado_huecos() 