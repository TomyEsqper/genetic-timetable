# Librerías de optimización para genetic-timetable
# Instalar con: pip install -r requirements-optimizacion.txt

# Optimización de datos y procesamiento vectorizado
polars>=0.20.0          # DataFrame ultra-rápido para operaciones con máscaras
pyarrow>=14.0.0         # Formato de datos eficiente para NumPy
duckdb>=0.9.0           # Base de datos en memoria para análisis rápido

# Validación y configuración
pydantic>=2.5.0         # Validación de datos y configuración
pandera>=0.19.0         # Validación de DataFrames

# Limpieza y normalización de datos
pyjanitor>=0.26.0       # Limpieza de datos
unidecode>=1.3.0        # Normalización de caracteres
rapidfuzz>=3.5.0        # Búsqueda difusa y comparación de strings

# Optimización numérica y paralelismo
numba>=0.58.0           # Compilación JIT para funciones críticas
joblib>=1.3.0           # Paralelización eficiente (evitar nested parallelism)

# Serialización y exportes rápidos
orjson>=3.9.0           # JSON ultra-rápido para respuestas API y logs
openpyxl>=3.1.0         # Exportes a Excel con formato profesional

# Monitoreo y profiling
py-spy>=0.3.0           # Profiler de bajo overhead
memory-profiler>=0.61.0 # Análisis de uso de memoria

# Testing y validación
hypothesis>=6.90.0       # Property-based testing
pytest-benchmark>=4.0.0 # Benchmarking de funciones

# Opcionales - solo si se necesita más rendimiento
# cupy>=12.0.0          # GPU acceleration para NumPy (requiere CUDA)
# dask>=2023.0.0        # Procesamiento paralelo distribuido 