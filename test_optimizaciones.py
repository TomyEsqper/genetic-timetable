#!/usr/bin/env python3
"""
Script de prueba r√°pida para verificar las optimizaciones implementadas.
Ejecutar: python test_optimizaciones.py
"""

import os
import sys
import django
from django.conf import settings

# Configurar Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'colegio.settings')
django.setup()

def test_optimizaciones():
    """Prueba r√°pida de las optimizaciones implementadas"""
    print("üß™ Probando optimizaciones del generador de horarios...")
    
    try:
        # 1. Verificar que DIAS se carga din√°micamente
        from horarios.genetico import DIAS, get_dias_clase
        print(f"‚úÖ DIAS cargado din√°micamente: {DIAS}")
        
        # 2. Verificar funci√≥n get_dias_clase
        dias_func = get_dias_clase()
        print(f"‚úÖ get_dias_clase() retorna: {dias_func}")
        
        # 3. Verificar que no hay DIAS hardcoded
        from horarios.genetico import DIAS
        if DIAS != ['lunes', 'martes', 'mi√©rcoles', 'jueves', 'viernes'] or len(DIAS) != 5:
            print(f"‚ö†Ô∏è DIAS no es el valor por defecto esperado: {DIAS}")
        else:
            print("‚úÖ DIAS usa valores por defecto (configuraci√≥n no encontrada)")
        
        # 4. Verificar warmup_numba
        from horarios.genetico import warmup_numba
        print("‚úÖ Funci√≥n warmup_numba disponible")
        
        # 5. Verificar modo r√°pido
        from horarios.genetico_funcion import generar_horarios_genetico
        print("‚úÖ Funci√≥n generar_horarios_genetico disponible")
        
        # 6. Verificar que se puede llamar con par√°metros m√≠nimos
        print("\nüöÄ Probando llamada con par√°metros m√≠nimos...")
        resultado = generar_horarios_genetico(
            poblacion_size=10,  # Muy peque√±o para prueba r√°pida
            generaciones=5,      # Muy pocas para prueba r√°pida
            timeout_seg=30       # Timeout corto
        )
        
        print(f"‚úÖ Llamada exitosa: {resultado.get('status', 'unknown')}")
        if resultado.get('status') == 'error':
            print(f"   Error: {resultado.get('mensaje', 'Sin mensaje')}")
        else:
            print(f"   Generaciones completadas: {resultado.get('generaciones_completadas', 0)}")
            print(f"   Tiempo total: {resultado.get('tiempo_total_segundos', 0):.2f}s")
        
        # 7. Verificar bulk_create en modelos
        from horarios.models import Horario
        print(f"‚úÖ Modelo Horario disponible, total actual: {Horario.objects.count()}")
        
        print("\nüéâ Todas las optimizaciones est√°n implementadas correctamente!")
        
    except Exception as e:
        print(f"‚ùå Error durante la prueba: {e}")
        import traceback
        traceback.print_exc()
        return False
    
    return True

def test_modo_rapido():
    """Prueba espec√≠fica del modo r√°pido"""
    print("\nüöÄ Probando modo r√°pido...")
    
    try:
        # Activar modo r√°pido
        os.environ['HORARIOS_FAST'] = '1'
        
        from horarios.genetico_funcion import generar_horarios_genetico
        
        # Llamar sin par√°metros para verificar defaults
        resultado = generar_horarios_genetico(
            poblacion_size=5,
            generaciones=3,
            timeout_seg=15
        )
        
        print(f"‚úÖ Modo r√°pido funcionando: {resultado.get('status', 'unknown')}")
        
        # Limpiar
        del os.environ['HORARIOS_FAST']
        
    except Exception as e:
        print(f"‚ùå Error en modo r√°pido: {e}")
        return False
    
    return True

if __name__ == '__main__':
    print("=" * 60)
    print("üß™ PRUEBA R√ÅPIDA DE OPTIMIZACIONES")
    print("=" * 60)
    
    # Ejecutar pruebas
    test_optimizaciones()
    test_modo_rapido()
    
    print("\n" + "=" * 60)
    print("‚úÖ PRUEBAS COMPLETADAS")
    print("=" * 60) 